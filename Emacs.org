#+TITLE: The Nerdy Hamster Emacs Configuration
#+AUTHOR: The Nerdy Hamster (Leo Rönnebro)
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Information
This is my personal emacs configuration named *TNH-Emacs*, everything is written as Org documents, so you can utilize both org-mode and generate the files needed.

*IMPORTANT*: If you run into any issue or questions while trying out the configuration please create a issue, to help me solve it faster. 

#+begin_src emacs-lisp
#+end_src
* Variables
#+begin_src emacs-lisp
  (defvar tnh/default-font-size 100)

  (defvar tnh/frame-transparency '(90 . 90))
#+end_src

* Startup
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun tnh/display-startup-time ()
    (message " TNH-Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'tnh/display-startup-time)
#+end_src

* Package system
** Basic setup
Emacs builtin package manager dosen't make it easy to automaticly install packages on new systems. =use-package= is one of many good package managers that can help you to automate the instalation and configuration of everything we use in this configuration.
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
** Automatic updates
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* Clean folders
I am using =no-littering= to keep emacs, and project folders clean. =no-littering= knows about a wide range of variables from both Emacs features and Community packages.
#+begin_src emacs-lisp
  (use-package no-littering)

  (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* UI Configuration
To achive a minimal look we need to remove undeeded GUI elements. If you want to use some of the elements its just to comment them out.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)			; Disable visible scrollbar
  (tool-bar-mode -1)			; Disable the toolbar
  (tooltip-mode -1)			; Disable tooltips
  (set-fringe-mode 5)			; Give text some breathing room

  (menu-bar-mode -1)			; Disable menu bar

  (setq visible-bell t)			; Enable visible bell

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha tnh/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,tnh/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Font configuration
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height tnh/default-font-size)

  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height tnh/default-font-size)
#+end_src

* Keybinds
I am using =evil-mode= to get a VI editing experience. To configure more modes with a VI editing experience I am using =evil-collection=. =general= is used to speed up and make it easier to configure custom keybindings that integrates well with =which-key=
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-auto-unbind-keys)
    (general-override-mode +1)

    (general-create-definer tnh/leader-key
      :states '(normal insert visual emacs treemacs)
      :keymap 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (tnh/leader-key
     "t" '(:ignore :wk "toggle")
     "tt" '(counsel-load-theme :wk "change theme")
     "fde" '(lambda () (interactivbe) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :custom
    (evil-undo-system 'undo-redo)

    :bind 
    (:map evil-motion-state-map
          ("q" . nil))
    :config
    (evil-mode 1)
    ;;(evil-define-key 'normal 'insert 'visual (kbd "C-c") 'hydra-master/body)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-insert-state-map (kbd "C-l") 'evil-delete-char)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* UI configuration
** Color theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-nord t))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom 
    (doom-modeline-height 5)
    (doom-themes-visual-bell-config)
    :config
    (display-battery-mode t)
    (display-time-mode t))

  (use-package time
    :config
    (setq display-time-format "%a %d/%m %H:%M")
          display-time-day-and-date t
          display-time-default-load-average nil)
#+end_src

** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    ;(setq which-key-popup-type 'frame)
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src

** Ivy & Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)
    (counsel-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

** Helpful Commands
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Text Scaling
#+begin_src emacs-lisp
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "Scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "quit" :exit t))

  (tnh/leader-key
    "ts" '(hydra-text-scale/body :wk "scale text"))
#+end_src

* Org mode
** Font faces
#+begin_src emacs-lisp
  (defun tnh/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
#+end_src

** Basic config
#+begin_src emacs-lisp
  (defun tnh/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . tnh/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)


    (tnh/org-font-setup))
#+end_src

** Better bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Better visual look
#+begin_src emacs-lisp
  (defun tnh/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . tnh/org-mode-visual-fill))
#+end_src
** Babel
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src
** Templates
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
** Auto-tangle
#+begin_src emacs-lisp
  (defun tnh/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'tnh/org-babel-tangle-config)))
#+end_src

* Runtime performance
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
