#+title: TNH-Emacs
#+authnor: TheNerdyHamster
#+mail: leo@letnh.com
#+language: en
#+options ':t toc:nil num:t author:t email:t

* TODO Introduction

* TODO The pre-phase of Emacs (=early-init.el=)

** The =early-init.el= of emacs.

#+begin_src emacs-lisp :tangle "early-init.el"
	;; Garbage collection
	(setq gc-cons-threshold (if (display-graphic-p) 40000000 10000000))

	(eval-and-compile
		(defun tnh-emacs/default-gc ()
			(setq-default gc-cons-threshold 800000))
		(defun tnh-emacs/maybe-gc ()
			(unless (frame-focus-state)
				(garbage-collect))))

	(add-hook 'after-init-hook #'tnh-emacs/default-gc)
	(add-function :after after-focus-change-function 'tnh-emacs/maybe-gc)

	;; Default locations
	(setq-default tnh-emacs/emacs-config-directory (file-name-directory load-file-name)
								user-emacs-directory (expand-file-name "~/.cache/emacs/")
								package-user-dir (expand-file-name "packages/" user-emacs-directory)
								url-history-file (expand-file-name "url/history" user-emacs-directory)
								custom-file (expand-file-name "custom.el" user-emacs-directory))
	(load custom-file :noerror)

	;; Native compilation
		(when (featurep 'native-compile)
		(let ((path (expand-file-name "eln-cache/" user-emacs-directory)))
			(setq-default native-compile-target-directory path
										native-comp-eln-load-path (list path)
										native-comp-async-report-warnings-errors nil
										native-comp-deferred-compilation 5
										native-comp-speed 2
										package-native-compile t)
			(when (fboundp 'startup-redirect-eln-cache)
				(startup-redirect-eln-cache path))))

	;; Custom load-paths
	(add-to-list 'load-path (expand-file-name "modules/" tnh-emacs/emacs-config-directory))

	;; Set default coding systems
	(set-default-coding-systems 'utf-8)

	;; Configure window configuration for special windows.
	(add-to-list 'display-buffer-alist
							 '("\\*Help\\*"
								 (display-buffer-reuse-window display-buffer-pop-up-window)
								 (inhibit-same-window . t)))

	(add-to-list 'display-buffer-alist
							 '("\\*Completions\\*"
								 (display-buffer-reuse-window display-buffer-pop-up-window)
								 (inhibit-same-window . t)
								 (window-height . 10)))

	(add-to-list 'display-buffer-alist
							 '("\\*Dictionay\\*"
								 (display-buffer-in-side-window)
								 (side . left)
								 (window-width . 70)))

	;; Set name for default frame.
	(add-hook 'after-init-hook (lambda () (set-frame-name "home")))

	;; Configure minimal frame.
	(setq frame-resize-pixelwise t
				frame-inhibit-implied-resize t
				frame-title-format '("%b")
				auto-window-vscroll nil
				byte-compile-warnings '(not obsolete)
				ring-bell-function 'ignore
				load-prefer-newer noninteractive
				package-enable-at-startup t
				site-run-file nil
				warning-suppress-log-types '((comp) (vytecomp))
				use-dialog-box nil
				use-file-dialog nil
				use-short-answers t
				inhibit-splash-screen t
				inhibit-startup-screen t
				inhibit-x-resources t
				inhibit-default-init t
				inhibit-startup-message t
				inhibit-startup-echo-area-message user-login-name
				inhibit-startup-buffer-menu t)


	;; Disable all graphical elements
	(blink-cursor-mode 1)
	(global-font-lock-mode 1)
	(menu-bar-mode -1)
	(scroll-bar-mode -1)
	(column-number-mode t)
	(tooltip-mode -1)
	(tool-bar-mode -1)
	(put 'downcase-region 'disabled nil)
	(put 'upcase-region 'disabled nil)

	;; Make the initial buffer load-faster.
	(setq initial-major-mode 'fundamental-mode)
#+end_src


* The main phanse of =init.el=

#+begin_src emacs-lisp :tangle "init.el"
	;; Startup time hook
	(defun tnh/display-startup-info ()
		(message "TNH-Emacs loaded in %s with %d garbage collections."
			 (format "%.2f seconds"
				 (float-time
					(time-subtract after-init-time before-init-time)))
			 gcs-done))
	(add-hook 'emacs-startup-hook #'tnh/display-startup-info)

	;; Package configuration
	(eval-when-compile
		(require 'package)

		(setq package-archives
		'(("melpa" . "http://melpa.org/packages/")
			("melpa-stable" ."https://stable.melpa.org/packages/")
			("nongnu" . "https://elpa.nongnu.org/nongnu/")
			("gnu-elpa" . "https://elpa.gnu.org/packages/")))

		(setq package-install-upgrade-built-in t
		package-archive-priorities '(("gnu-elpa" . 200)
							 ("melpa" . 150)
							 ("melpa-stable" . 100)
							 ("nongnu" . 50)))

		(package-initialize)
		(unless package-archive-contents
			(package-refresh-contents))

		(unless (package-installed-p 'use-package)
			(package-install 'use-package))
		(require 'use-package)
		(put 'use-package 'lisp-indent-function 1)

		(use-package use-package-core
			:custom
			(use-package-minimum-reported-time 0.005)
			(use-package-enable-imenu-support t)))

	;; Theme
	(use-package doom-themes
		:ensure t
		:custom
		(doom-themes-enable-bold t)
		(doom-themes-enable-italic t)
		:config
		(load-theme 'doom-gruvbox t)
		(doom-themes-org-config))

	;; Custom functions
	(require 'functions-tnh)

	;; Base configuration
	(require 'base-tnh)

	;; Icons and modeline
	(require 'tnh-all-the-icons)
	(require 'tnh-modeline)

#+end_src

* The =modules/= are nice

** The =functions_tnh.el= custom made functions

#+begin_src emacs-lisp :tangle "modules/functions-tnh.el"
	(defun tnh-emacs/dig (host type)
		(interactive "sHost: \nsType: ")
		(dig host type))

	;; Vterm
	(defun tnh-emacs/vterm-open (name)
		(interactive "sSession name: ")
		(vterm (format "term-%s" name)))

	(provide 'functions-tnh)
#+end_src

** The =base-tnh= basic emacs settings

#+begin_src emacs-lisp :tangle "modules/base-tnh.el"
	(use-package emacs-lisp-mode
		:mode ("\\.el\\'" "\\.el.tmp\\'"))

	(use-package savehist
		:demand t
		:custom
		(history-delete-duplicates t)
		(history-length 3000)
		:config
		(savehist-mode))

	(use-package files
		:demand t
		:functions emacs-tmp-dir
		:init
		(defconst emacs-tmp-dir (expand-file-name (format "emacs%d/" (user-uid)) temporary-file-directory))
		(setq auto-save-file-name-transforms `((".*" .emacs-tmp-dir t))
					backup-directory-alist `((".*" ,emacs-tmp-dir))
					auto-save-timeout 3
					auto-save-list-file-name nil
					auto-save-interval 0
					auto-save-default t
					auto-save-list-file-prefix emacs-tmp-dir)
		:custom
		(backup-inhibited t)
		(confirm-kill-processes nil)
		(create-lockfiles nil)
		(delete-old-versions t)
		(make-backup-files nil)
		(version-control t)
		(vc-make-backup-files t)
		(kept-new-versions 5)
		(kept-old-versions 0))

	(use-package autorevert
		:defer 3
		:custom
		(global-auto-revert-non-file-buffers t)
		:config
		(global-auto-revert-mode t))

	(provide 'base-tnh)
#+end_src

** The =tnh-all-the-icons= basic emacs settings

#+begin_src emacs-lisp :tangle "modules/tnh-all-the-icons.el"
	(eval-when-compile (require 'use-package))
	(use-package all-the-icons
		:ensure t
		:if (display-graphic-p)
		:commands all-the-icons-install-fonts
		:custom
		(all-the-icons-dired-monochrome nil)
		:custom-face
		(all-the-icons-dired-dir-face ((t (:foreground "orange"))))
		:init
		(unless (find-font (font-spec :name "all-the-icons"))
			(all-the-icons-install-fonts t)))

	(use-package all-the-icons-dired
		:ensure t
		:after all-the-icons)

	(provide 'tnh-all-the-icons)
#+end_src
** The =tnh-mode-line= basic emacs settings
#+begin_src emacs-lisp :tangle "modules/tnh-modeline.el"
	(eval-when-compile (require 'use-package))
	(use-package hide-mode-line
		:ensure t
		:init
		(setq hide-mode-line-excluded-modes nil))

	(use-package mini-echo
		:ensure t
		:after hide-mode-line
		:config
		(mini-echo-mode 1))

	(provide 'tnh-modeline)
#+end_src

** The =tnh-all-the-icons= basic emacs settings

#+begin_src emacs-lisp :tangle "modules/tnh-all-the-icons.el"
#+end_src


