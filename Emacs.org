#+TITLE: The Nerdy Hamster Emacs Configuration
#+AUTHOR: The Nerdy Hamster (Leo Rönnebro)
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Information
This is my personal emacs configuration named *TNH-Emacs*, everything is written as Org documents, so you can utilize both org-mode and generate the files needed.

*IMPORTANT*: If you run into any issue or questions while trying out the configuration please create a issue, to help me solve it faster. 

* Variables
#+begin_src emacs-lisp
  (defvar tnh/default-font-size 100)

  (defvar tnh/frame-transparency '(100 . 100))

  ;; Secrets
  (defvar tnh/wk-token  nil "Wakatime API token")
  (defvar tnh/vpn-host  nil "Openforti VPN Host name")
  (defvar tnh/vpn-user  nil "Openforti VPN user")
  (defvar tnh/vpn-cert  nil "Openforti VPN cert")
#+end_src

#+begin_src emacs-lisp
  (let ((secrets (expand-file-name ".secrets.el" user-emacs-directory)))
    (load secrets t))
#+end_src

* Startup
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun tnh/display-startup-time ()
    (message " TNH-Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'tnh/display-startup-time)
#+end_src

* Server
#+begin_src emacs-lisp
  (server-start)
#+end_src

* Desktop
#+begin_src emacs-lisp :tangle no
  (setq tnh/exwm-enabled (and (eq window-system 'x)
                             (seq-contains command-line-args "--use-exwm")))

  (when tnh/exwm-enabled
    (load-file "~/.emacs.d/exwm.el"))
#+end_src

* GCC
#+begin_src emacs-lisp :tangle no
  (setq package-native-compile t
        comp-async-report-warnings-errors nil)
#+end_src

* Package system
** Basic setup =deprecated=
Emacs builtin package manager dosen't make it easy to automaticly install packages on new systems. =use-package= is one of many good package managers that can help you to automate the instalation and configuration of everything we use in this configuration.
#+begin_src emacs-lisp :tangle no
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  ;(setq use-package-verbose t)
#+end_src

** Straight.el
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Always use straight.el to install new packages
  ;(setq straight-use-package-by-default t)

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)

  (let ((straight-current-profile 'pinned))
    (straight-use-package 'org-plus-contrib)
    (straight-use-package 'org)
    ;; Pin org-mode version.
    (add-to-list 'straight-x-pinned-packages
		 '("org" . "924308a150ab82014b69c46c04d1ab71e874a2e6")))
#+end_src

Define package sources.
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src
** Automatic updates
#+begin_src emacs-lisp :tangle no
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* Clean folders
I am using =no-littering= to keep emacs, and project folders clean. =no-littering= knows about a wide range of variables from both Emacs features and Community packages.
#+begin_src emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  (use-package no-littering
    :straight t)

  (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* UI Configuration
To achive a minimal look we need to remove undeeded GUI elements. If you want to use some of the elements its just to comment them out.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq warning-minimum-level :error)

  (scroll-bar-mode -1)			; Disable visible scrollbar
  (tool-bar-mode -1)			; Disable the toolbar
  (tooltip-mode -1)			; Disable tooltips
  (set-fringe-mode 5)			; Give text some breathing room

  (menu-bar-mode -1)			; Disable menu bar

  (setq visible-bell t)			; Enable visible bell

  (column-number-mode)
  (global-display-line-numbers-mode t)

  (setq x-stretch-cursor t)
  (global-hl-line-mode +1)


  (set-frame-parameter (selected-frame) 'alpha tnh/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,tnh/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                   vterm-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Default buffer
  ;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Font configuration
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height tnh/default-font-size)

  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height tnh/default-font-size)
#+end_src

** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :load-path "~/.emacs.d/github/ligature"
    :config
    ;; Enable the www ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))

    ;; Enable ligatures in programming modes                                                           
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
    ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
    "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
    "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
    "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
    "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
    "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
    "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
    "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
    "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

    (global-ligature-mode 't))
#+end_src

* Keybinds
I am using =evil-mode= to get a VI editing experience. To configure more modes with a VI editing experience I am using =evil-collection=. =general= is used to speed up and make it easier to configure custom keybindings that integrates well with =which-key=
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :straight t
    :after evil
    :config
    (general-auto-unbind-keys)
    (general-override-mode +1)

    (general-create-definer tnh/leader-key
      :states '(normal insert visual emacs treemacs)
      :keymap 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (tnh/leader-key
     "t" '(:ignore t :wk "toggle")
     "tt" '(counsel-load-theme :wk "change theme")
     "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :custom
    (evil-undo-system 'undo-redo)

    :bind 
    (:map evil-motion-state-map
          ("q" . nil))
    :config
    (evil-mode 1)
    ;;(evil-define-key 'normal 'insert 'visual (kbd "C-c") 'hydra-master/body)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-insert-state-map (kbd "C-l") 'evil-delete-char)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Key chord

#+begin_src emacs-lisp
  (use-package key-chord
    :straight t
    :config
    (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
    (key-chord-define evil-insert-state-map  "kj" 'evil-normal-state)
    (key-chord-mode 1))
#+end_src

* UI configuration
** Color theme
#+begin_src emacs-lisp
    (use-package doom-themes
      :straight t)

    (defun tnh/apply-theme ()
      "Apply selected theme, and make the frame transparent."
      (interactive)
      (load-theme 'doom-dracula t))

    (tnh/apply-theme)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1)
    :custom 
    (doom-modeline-height 5)
    (doom-themes-visual-bell-config)
    :config
    (display-battery-mode t)
    (display-time-mode t))

  (use-package time
    :config
    (setq display-time-format "%a %d/%m %H:%M")
          display-time-day-and-date t
          display-time-default-load-average nil)
#+end_src

** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :diminish which-key-mode
    :config
    ;(setq which-key-popup-type 'frame)
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src

** Ivy & Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :straight t
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :straight t
    :bind (("C-M-j" . 'counsel-switch-buffer)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)
    (counsel-mode 1))

  (use-package ivy-prescient
    :straight t
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

** Helpful Commands
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Text Scaling
#+begin_src emacs-lisp
  (use-package hydra
    :straight t)

  (defhydra hydra-text-scale (:timeout 4)
    "Scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "quit" :exit t))

  (tnh/leader-key
    "ts" '(hydra-text-scale/body :wk "scale text"))
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package page-break-lines
    :straight t
    :init (page-break-lines-mode t))

  (use-package dashboard
    :straight t
    :init
    (progn
      (setq dashboard-items '((recents . 10)
                              (projects . 10)))
      (setq dashboard-show-shortcuts nil
            dashboard-banner-logo-title "Welcome to The Nerdy Hamster Emacs"
            dashboard-set-file-icons t
            dashboard-set-heading-icons t
            dashboard-startup-banner 'logo
            dashboard-set-navigator t
            dashboard-navigator-buttons
      `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                "Github"
                "Browse homepage"
                (lambda (&rest _) (browse-url "https://github.com/TheNerdyHamster/The-Nerdy-Hamster-Emacs")))
              (,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
                "Linkedin"
                "My Linkedin"
                (lambda (&rest _) (browse-url "https://www.linkedin.com/in/leo-ronnebro/" error)))
            ))))
    :config
    (setq dashboard-center-content t)
    (dashboard-setup-startup-hook))
#+end_src
* Window 
** Eyebrowse
#+begin_src emacs-lisp
  (use-package eyebrowse
    :straight t
    :bind
    ("M-0" . eyebrowse-last-window-config)
    ("M-1" . eyebrowse-switch-to-window-config-1)
    ("M-2" . eyebrowse-switch-to-window-config-2)
    ("M-3" . eyebrowse-switch-to-window-config-3)
    ("M-4" . eyebrowse-switch-to-window-config-4)
    ("M-5" . eyebrowse-switch-to-window-config-5)
    ("M-6" . eyebrowse-switch-to-window-config-6)
    ("M-7" . eyebrowse-switch-to-window-config-7)
    ("M-8" . eyebrowse-switch-to-window-config-8)
    ("M-9" . eyebrowse-switch-to-window-config-9)
    :hook
    (after-init . eyebrowse-mode)
    :custom
    (eyebrowse-new-workspace t))
#+end_src
* Org mode
** Bindings
#+begin_src emacs-lisp
  (tnh/leader-key
     "o" '(:ignore t :wk "org")
     "oa" '(org-agenda :wk "agenda")
     "oc" '(org-capture :wk "capture")
     "ol" '(org-store-link :wk "link"))
#+end_src
** Font faces
#+begin_src emacs-lisp
  (defun tnh/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code Nerd Font" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

  (defun tnh/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun tnh/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'tnh/org-babel-tangle-config)))
#+end_src

** Basic config
#+begin_src emacs-lisp
  (use-package org
    :commands (org-capture org-agenda)
    :hook ((org-mode . tnh/org-mode-setup)
           (org-mode . tnh/org-font-setup)
           (org-mode . org-bullets-mode))
    :custom
    (org-ellipsis " ▾")
    (org-agenda-files
     '("~/Documents/Org/"))
    :config

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

** Better bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :straight t
    :after org
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Better visual look
#+begin_src emacs-lisp
  (defun tnh/org-mode-visual-fill ()
    (setq visual-fill-column-width 140
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :straight t
    :after org
    :hook (org-mode . tnh/org-mode-visual-fill))
#+end_src
** Babel
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src
** Templates
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

* Development
** Language Server
*** LSP
**** lsp-mode
#+begin_src emacs-lisp
  (defun tnh/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . tnh/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (setq lsp-completion-provider :capf)
    (lsp-enable-which-key-integration t))
#+end_src

**** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

**** lsp-ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :straight t
    :after lsp)
#+end_src

*** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :config
    (add-to-list 'eglot-server-programs
                 `(csharp-mode . ("/home/leo/.cache/emacs/var/omnisharp/cache/server/v1.37.5/run"))))
#+end_src

** Languages
*** Golang
#+begin_src emacs-lisp
  (defun tnh/go-mode-setup ()
    (setq tab-width 2
          evil-shift-width 2))
  
  (defun tnh/go-save-hooks ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t)
    (add-hook 'before-save-hook #'eglot-code-action-organize-imports))

  (use-package go-mode
    :straight t
    :hook ((go-mode . eglot-ensure)
           (go-mode . tnh/go-save-hooks)
           (go-mode . tnh/go-mode-setup))
    :mode "\\.go\\'")
#+end_src
*** Rust
#+begin_src emacs-lisp
  (defun tnh/rust-mode-setup ()
    (setq indent-tabs-mode nil
          rust-format-on-save t))

  (use-package rust-mode
    :straight t
    :hook ((rust-mode . eglot-ensure)
           (rust-mode . tnh/rust-mode-setup))
    :mode "\\.rs\\'")
#+end_src

*** C#
#+begin_src emacs-lisp
  (use-package csharp-mode
    :straight t
    :hook
    (csharp-mode . rainbow-delimiters-mode)
    (csharp-mode . company-mode)
    (csharp-mode . lsp-deferred)
    ;(csharp-mode . flycheck-mode)
    (csharp-mode . omnisharp-mode))

  (use-package omnisharp
    :straight t
    :after csharp-mode company
    :commands omnisharp-install-server
    :config
    (setq indent-tabs-mode nil
          c-syntactic-indentation t
          c-basic-offset 2
          tab-width 2
          evil-shift-width 2)
    (tnh/leader-key
      "o" '(:ignore o :which-key "omnisharp")
      "o r" '(omnisharp-run-code-action-refactoring :which-key "omnisharp refactor")
      "o b" '(recompile :which-key "omnisharp build/recompile")
      )
    (add-to-list 'company-backends 'company-omnisharp))
#+end_src

*** Python
#+begin_src emacs-lisp
  (use-package python
    :hook (python-mode . eglot-ensure)
    :custom
    (python-shell-interpreter "python3"))
#+end_src

#+begin_src emacs-lisp
  (use-package pyvenv
    :straight t
    :after python-mode
    :config
    (pyvenv-mode 1))
#+end_src

*** Yml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode "\\.yml\\'")
#+end_src
** Company mode
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :after eglot
    :hook (eglot-managed-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map eglot-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (setq company-backends '(company-capf))
    (setq company-auto-commit t))

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))
#+end_src

** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :straight t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :straight t
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
*** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :straight t
    :preface
    (defun tnh/git-gutter-enable ()
      (when-let* ((buffer (buffer-file-name))
                  (backend (vc-backend buffer)))
        (require 'git-gutter)
        (require 'git-gutter-fringe)
        (git-gutter-mode 1)))
    :hook
    (after-change-major-mode . tnh/git-gutter-enable)
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [192] nil nil '(center t))
    (define-fringe-bitmap 'git-gutter-fr:deleted [192] nil nil '(center t))
    (define-fringe-bitmap 'git-gutter-fr:modified [192] nil nil '(center t)))
#+end_src

* Terminal
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))
#+end_src

** Dired
#+begin_src emacs-lisp
  (use-package dired
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :straight t)
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :straight t
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :straight t
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src
* Tools
** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t
    :mode "Dockerfile\\'")
#+end_src
** Fish
#+begin_src emacs-lisp
  (defun tnh/fish-save-hook ()
    (add-hook 'before-save-hook 'fish_indent-before-save))

  (use-package fish-mode
    :straight t
    :hook (fish-mode . tnh/fish-save-hook)
    :mode "\\.fish\\'")
#+end_src
* Misc
** Restart Emacs
#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t)
#+end_src
** Discord precense

#+begin_src emacs-lisp
  (use-package elcord
    :straight t
    :config
    (elcord-mode 1))
#+end_src
** Wakatime
#+begin_src emacs-lisp
  (use-package wakatime-mode 
    :straight t
    :config
    (setq wakatime-api-key tnh/wk-token)
    (global-wakatime-mode))
#+end_src

** Process Mgmt
#+begin_src emacs-lisp
  (use-package proced
    :commands proced
    :config
    (setq proced-auto-update-interval 1)
    (add-hook 'proced-mode-hook
              (lambda ()
                (proced-toggle-auto-update 1))))
#+end_src

** Openfortivpn
#+begin_src emacs-lisp
  ;; (defun tnh/connect-vpn ()
  ;;   "Connect to vpn via openfortivpn."
  ;;   (interactive)
  ;;   (let (pwd (read-passwd "Enter pwd: ")))
  ;;     (message "%s" pwd))

  (defun tnh/connect-vpn ()
    "Connect to vpn via openfortivpn."
    (interactive)
    (let ((pwd (read-passwd "Enter password: ")))
      (start-process-shell-command "tnh/openfortivpn" "vpn-log" (format "sudo -S openfortivpn %s -u %s --trusted-cert %s -p %s" tnh/vpn-host tnh/vpn-user tnh/vpn-cert pwd))))
#+end_src

** Editing files as sudo
#+begin_src emacs-lisp
  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

  (defun tnh/sudo-find-file ()
    (interactive)
    (counsel-find-file "/sudo::/"))
#+end_src

** Insert links to file as tasks
#+begin_src emacs-lisp
  (defun tnh/insert-pdf-links ()
    "Generate a todo list of files within a directory"
    (interactive)
    (let ((path (read-directory-name "Directory:")))
      (let ((files (directory-files path nil "\\.pdf$")))
        (dolist (file files)
          (message (format "path is %s" path))
          (newline)
          (insert (format "*** [ ] [[file:%s%s][%s]]" path file file))))))
#+end_src
* Runtime performance
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

