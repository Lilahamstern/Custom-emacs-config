#+TITLE: Hamster Emacs Configuration
#+AUTHOR: Lilahamstern
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Variabels
  #+begin_src emacs-lisp
  (defvar he/default-font-size 100)
  (defvar he/default-variable-font-size 100)
  #+end_src

* Package System
Installation of use-package.
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* EXWM
#+begin_src emacs-lisp
(use-package exwm
  :init
  (setq mouse-autoselect-window nil
        focus-follow-mouse t
        exwm-workspace-warp-cursor t
        exwm-workspace-number 5)
  :config
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (when (string-equal exwm-class-name "Vimb")
                (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))))

(exwm-enable))

(setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-h
        ?\M-x
        ?\M-&     ;; Async shell command
        ?\M-:     ;; Eval
        ?\C-\M-j  ;; Buffer list
        ?\C-\M-k  ;; Browser list
        ?\C-\     ;; Ctrl+Space
        ?\C-\;))
#+end_src
* Keep .emacs.d clean
#+begin_src emacs-lisp
(setq user-emacs-directory "~/.cache/emacs/"
      backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
      url-history-file (expand-file-name "url/history" user-emacs-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))
#+end_src
* Essential UI Configuration
 Configuration of UI Settings, that removes unnessecary elements such as Menubar, Toolbar, etc.
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)
 (setq initial-buffer-choice "*dashboard*")

 (scroll-bar-mode -1)        ; Disable visible scrollbar
 (tool-bar-mode -1)          ; Disable the toolbar
 (tooltip-mode -1)           ; Disable tooltips
 (set-fringe-mode 10)        ; Give some breathing room

 (menu-bar-mode -1)            ; Disable the menu bar

 ;; Set up the visible bell
 (setq visible-bell t)

 (global-hl-line-mode +1)    ; Enable line highlight
 (column-number-mode)
 (global-display-line-numbers-mode t)

 ;; Disable line numbers for some modes
 (dolist (mode '(org-mode-hook
                 term-mode-hook
                 shell-mode-hook
	           treemacs-mode-hook
                 eshell-mode-hook))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))
 ;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  #+END_SRC
** TODO Font 
   #+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Code NF" :height he/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code NF" :height he/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Fira Code NF" :height he/default-variable-font-size :weight 'regular)

(use-package ligature
  :load-path "/home/lilahamstern/.emacs.d/github/ligature.el"
  :config
  ;; Enable the www ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))

  ;; Enable ligatures in programming modes                                                           
  (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
  ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
  "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
  "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
  "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
  "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
  "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
  "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
  "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
  "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

  (global-ligature-mode 't))
   #+end_src
* Keybinding Configuration  
  #+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-unset-key (kbd "C-SPC"))


(use-package general
  :config
  
  (general-override-mode +1)

  (general-create-definer he/leader-keys
    :states '(normal insert visual emacs treemacs)
    :keymap 'override
    :prefix "SPC"
    :global-prefix "C-SPC"
    :non-normal-prefix "C-SPC"))

(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-undo-system t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
  #+end_src
** Global keybindings
#+begin_src emacs-lisp
(he/leader-keys
 ;; General
 "/"  '(evilnc-comment-or-uncomment-lines :which-key "Comment")
 "s"  '(swiper :which-key "Search file")
 "."  '(counsel-find-file :which-key "Find file")
 "<"  '(counsel-switch-buffer :which-key "Switch buffer")
 "SPC"'(counsel-projectile-find-file :which-key "Find project file")
 ;; Buffer
 "b"  '(:ignore b :which-key "buffer")
 "bs" '(save-buffer :which-key "Save buffer")
 "bn" '(evil-next-buffer :which-key "Next buffer")
 "bp" '(evil-prev-buffer :which-key "Prev buffer")
 "bk" '(kill-buffer :which-key "Kill buffer")
 ;; Open
 "o"  '(:ignore o :which-key "open")
 "op" '(treemacs :which-key "treemacs")
 "od" '(docker :which-key "docker")
                                        ;: Org
 "O"  '(:ignore O :which-key "org")
 "Oa" '(org-agenda :which-key "Agenda")
 ;; Toggle
 "t"  '(:ignore t :which-key "toggle")
 ;; Window
 "w"  '(:ignore w :which-key "window")
 
 "tab" '(:ignore tab :which-key "Workspaces")
 "<tab>s" '(exwm-workspace-switch :which-key "Switch workspace")
 "<tab>1" (lambda () (interactive) (exwm-workspace-switch 0) :which-key "Workspace 1")
 "<tab>2" (lambda () (interactive) (exwm-workspace-switch 1) :which-key "Workspace 2")
 "<tab>3" (lambda () (interactive) (exwm-workspace-switch 2) :which-key "Workspace 3")
 "<tab>4" (lambda () (interactive) (exwm-workspace-switch 3) :which-key "Workspace 1")
 "<tab>5" (lambda () (interactive) (exwm-workspace-switch 4) :which-key "Workspace 5")
 "<tab>m" '(exwm-workspace-move-window :which-key "Move window to workspace")
 )
#+end_src
* UI Configuration 
** Theme
   #+begin_src emacs-lisp
   (use-package doom-themes
     :init (load-theme 'doom-dracula t))
   #+end_src
** Command Log Mode
   #+begin_src emacs-lisp
   (use-package command-log-mode)
   #+end_src
** Modeline
   #+begin_src emacs-lisp
   (use-package all-the-icons
     :ensure t)
   
   (use-package doom-modeline
     :init (doom-modeline-mode 1)
     :custom 
       (doom-modeline-height 15))

    (display-battery-mode t)
    (display-time-mode t)  
   #+end_src
** Sublimity
#+begin_src emacs-lisp
(use-package sublimity
  :init
  (require 'sublimity-scroll)
  :config
  (sublimity-mode 1))
#+end_src
** Treemacs
#+begin_src emacs-lisp
(use-package treemacs)

(use-package treemacs-evil
  :after treemacs)

(use-package treemacs-projectile
  :after treemacs)
#+end_src
** Centaur tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :demand
  :init
  (setq centaur-tabs-style "bar"
    centaur-tabs-set-icons t
    centaur-tabs-set-close-button nil)
  :config
  (centaur-tabs-mode t))

#+end_src
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 5)
			    (projects . 10)))
    (setq dashboard-show-shortcuts nil
	  dashboard-banner-logo-title "Welcome to Hamster-Emacs"
	  dashboard-set-file-icons t
	  dashboard-set-heading-icons t
	  dashboard-set-navigator t
	  dashboard-navigator-buttons
	  `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
              "Github"
	      "Browse homepage"
              (lambda (&rest _) (browse-url "https://github.com/Lilahamstern/Hamster-emacs")))
            (,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
              "Linkedin"
              "My Linkedin"
              (lambda (&rest _) (browse-url "https://www.linkedin.com/in/leo-ronnebro/" error)))
	  ))))
  :config
  (setq dashboard-center-content t)
  (dashboard-setup-startup-hook))
#+end_src
** Which Key
   #+begin_src emacs-lisp
 (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.4))  
   #+end_src
** Ivy & Counsel
   #+begin_src emacs-lisp
 (use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)
  (counsel-mode 1)) 

(use-package smex 
  :defer 1
  :after counsel)

(use-package ivy-posframe
  :custom
  (ivy-posframe-width      115)
  (ivy-posframe-min-width  115)
  (ivy-posframe-height     10)
  (ivy-posframe-min-height 10)
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  (setq ivy-posframe-parameters '((parent-frame . nil)
                                  (left-fringe . 8)
                                  (right-fringe . 8)))
   (ivy-posframe-mode 1))
   #+end_src
** Helpful Commands
   #+begin_src emacs-lisp
 (use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))  
   #+end_src
* Org Mode 
** Custom Font Faces 
   #+begin_src emacs-lisp
 (defun he/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Fira Code NF" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))  
   #+end_src
** Basic Config 
   #+begin_src emacs-lisp
(defun he/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :hook (org-mode . he/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/Documents/Org/Tasks.org"
          "~/Documents/Org/Habits.org"
          "~/Documents/Org/Birthdays.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)
      ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-note")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/Documents/Org/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/Documents/Org/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/Documents/Org/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/Documents/Org/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/Documents/Org/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (he/org-font-setup))
   #+end_src
** Custom Bullets
   #+begin_src emacs-lisp
 (use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))  
   #+end_src
** Layout Org Buffers 
   #+begin_src emacs-lisp
(defun he/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . he/org-mode-visual-fill))
   #+end_src
** Configure Babel 
   #+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)
   #+end_src
** Templates 
   #+begin_src emacs-lisp
 ;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))  
   #+end_src
** Automatic tangel of Configuration Files
   #+begin_src emacs-lisp
(defun he/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/Emacs/hamster-emacs/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'he/org-babel-tangle-config)))
   #+end_src
* Development 
** Languages
*** Typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src
** Language Servers
#+begin_src emacs-lisp
(defun he/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . he/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "SPC-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024))
  
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))
  ;; :custom
  ;; (setq lsp-ui-doc-position 'bottom))
  
(use-package lsp-treemacs
  :after lsp)
  
(use-package lsp-ivy)
#+end_src
*** Company Mode
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
          ("<tab>" . company-complete-selection))
         (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src
** Projectile 
   #+begin_src emacs-lisp
 (use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))  
   #+end_src
** Magit 
   #+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package evil-magit
  :after magit)

;; NOTE: Make sure to configure a GitHub token before using this package!
;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
(use-package forge)
   #+end_src
** Comments
   #+begin_src emacs-lisp
 (use-package evil-nerd-commenter)
   #+end_src
** Expand region
#+begin_src emacs-lisp
(use-package expand-region)
#+end_src
** Rainbow Delimiters
   #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src
** Docker
#+begin_src emacs-lisp
(use-package docker
  :ensure t)
#+end_src
* Misc
** Elcord
#+begin_src emacs-lisp
(use-package elcord
  :config
  (elcord-mode 1))
#+end_src

